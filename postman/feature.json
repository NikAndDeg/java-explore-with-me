{
	"info": {
		"_postman_id": "c3aa966f-a915-42f1-9d7e-bbe80d1e15e2",
		"name": "feature: comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32339633"
	},
	"item": [
		{
			"name": "Private",
			"item": [
				{
					"name": "POST comment",
					"item": [
						{
							"name": "Комментарий без тела",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с пустым text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с blank text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"           \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с некорректным id пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{id0}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{id0}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с некорректным id события",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid}}/comments/{{id0}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid}}",
										"comments",
										"{{id0}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий к несуществующему событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Not Found'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Not Found\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'Event with id[\" + pm.collectionVariables.get(\"id999\")  + \"] doesn't exist.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"Event with id[\" + pm.collectionVariables.get(\"id999\")  + \"] doesn't exist.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid}}/comments/{{id999}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid}}",
										"comments",
										"{{id999}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий от несуществующего пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Not Found'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Not Found\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'User with id[\" + pm.collectionVariables.get(\"id999\") + \"] doesn't exist.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"User with id[\" + pm.collectionVariables.get(\"id999\") + \"] doesn't exist.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{id999}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{id999}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий к своему событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Conflict'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Conflict\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'Event initiator cannot add a comment.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"Event initiator cannot add a comment.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий к неопубликованному событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Conflict'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Conflict\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'Event is unpublished.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"Event is unpublished.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const otherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid1\", otherUser.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий к событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.not.be.null;\r",
											"   pm.collectionVariables.set(\"commentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'some comment'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"some comment\"); \r",
											"});\r",
											"\r",
											"pm.test(\"createdOn test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(new Date(jsonData.createdOn).toISOString().substring(0, 18)).to.eql(new Date().toISOString().substring(0, 18)); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const otherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid1\", otherUser.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE comment",
					"item": [
						{
							"name": "Комментарий с некорректным id пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{id0}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{id0}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с некорректным id комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{id0}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{id0}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Несуществующий комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Not Found'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Not Found\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'Comment with id[\" + pm.collectionVariables.get(\"id999\") + \"] doesn't exist.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"Comment with id[\" + pm.collectionVariables.get(\"id999\") + \"] doesn't exist.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{id999}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{id999}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с несуществующим пользователем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Not Found'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Not Found\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'User with id[\" + pm.collectionVariables.get(\"id999\") + \"] doesn't exist.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"User with id[\" + pm.collectionVariables.get(\"id999\") + \"] doesn't exist.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{id999}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{id999}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария другим пользователем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Conflict'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Conflict\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'User is not commenter.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"User is not commenter.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"some comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий должен быть удален",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Not Found'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Not Found\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'Comment with id[\" + pm.collectionVariables.get(\"commentId\") + \"] doesn't exist.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"Comment with id[\" + pm.collectionVariables.get(\"commentId\") + \"] doesn't exist.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET comment",
					"item": [
						{
							"name": "Комментарий с некорректным id пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{id0}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{id0}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с некорректным id комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{id0}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{id0}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с несуществующим пользователем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Not Found'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Not Found\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'User with id[\" + pm.collectionVariables.get(\"id999\") + \"] doesn't exist.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"User with id[\" + pm.collectionVariables.get(\"id999\") + \"] doesn't exist.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{id999}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{id999}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Несуществующий комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Not Found'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Not Found\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'Comment with id[\" + pm.collectionVariables.get(\"id999\") + \"] doesn't exist.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"Comment with id[\" + pm.collectionVariables.get(\"id999\") + \"] doesn't exist.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{id999}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{id999}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий к событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.not.be.null;\r",
											"   pm.collectionVariables.set(\"commentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'second comment'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"second comment\"); \r",
											"});\r",
											"\r",
											"pm.test(\"createdOn test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(new Date(jsonData.createdOn).toISOString().substring(0, 18)).to.eql(new Date().toISOString().substring(0, 18)); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const otherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid1\", otherUser.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"second comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария комментатором",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.eq(parseInt(pm.collectionVariables.get(\"commentId\")));\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'some comment'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"second comment\"); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария инициатором события",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.eq(parseInt(pm.collectionVariables.get(\"commentId\"))); \r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'some comment'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"second comment\"); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария другим пользователем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.eq(parseInt(pm.collectionVariables.get(\"commentId\")));\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'some comment'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"second comment\"); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid3\", user.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid3}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid3}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET comments",
					"item": [
						{
							"name": "Некорректные rangeStart и rangeEnd",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments?eventId={{eid}}&rangeStart=2222-01-06%2013%3A30%3A38&rangeEnd=2020-09-06%2013%3A30%3A38",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "rangeStart",
											"value": "2222-01-06%2013%3A30%3A38"
										},
										{
											"key": "rangeEnd",
											"value": "2020-09-06%2013%3A30%3A38"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос с некорректным id пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{id0}}/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{id0}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос с некорректным id события",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid}}/comments?eventId={{id0}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{id0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос с несуществующим пользователем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{id999}}/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{id999}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос с несуществующим собыием",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid}}/comments?eventId={{id999}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{id999}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий хоба к событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.not.be.null;\r",
											"   pm.collectionVariables.set(\"commentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'хоба'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"хоба\"); \r",
											"});\r",
											"\r",
											"pm.test(\"createdOn test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(new Date(jsonData.createdOn).toISOString().substring(0, 18)).to.eql(new Date().toISOString().substring(0, 18)); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const otherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid1\", otherUser.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"хоба\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий оба к событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.not.be.null;\r",
											"   pm.collectionVariables.set(\"commentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'оба'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"оба\"); \r",
											"});\r",
											"\r",
											"pm.test(\"createdOn test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(new Date(jsonData.createdOn).toISOString().substring(0, 18)).to.eql(new Date().toISOString().substring(0, 18)); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"оба\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий хобот к событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.not.be.null;\r",
											"   pm.collectionVariables.set(\"commentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'хобот'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"хобот\"); \r",
											"});\r",
											"\r",
											"pm.test(\"createdOn test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(new Date(jsonData.createdOn).toISOString().substring(0, 18)).to.eql(new Date().toISOString().substring(0, 18)); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"хобот\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Тест на опциональность параметров поиска",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по тексту оба",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"array size test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.length).to.eql(2); \r",
											"});\r",
											"\r",
											"pm.test(\"test хоба test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData[0].text).to.eql(\"хоба\"); \r",
											"});\r",
											"\r",
											"pm.test(\"test оба test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData[1].text).to.eql(\"оба\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments?eventId={{eid}}&text=оба",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "text",
											"value": "оба"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Patch",
					"item": [
						{
							"name": "Комментарий к событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.not.be.null;\r",
											"   pm.collectionVariables.set(\"commentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'second comment'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"second comment\"); \r",
											"});\r",
											"\r",
											"pm.test(\"createdOn test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(new Date(jsonData.createdOn).toISOString().substring(0, 18)).to.eql(new Date().toISOString().substring(0, 18)); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const otherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid1\", otherUser.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"second comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с некорректным id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{id0}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{id0}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий без тела",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с пустым text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий с blank text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"   \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Несуществующий комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"qwerty\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{id999}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{id999}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.eq(parseInt(pm.collectionVariables.get(\"commentId\")));\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'qwerty'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"qwerty\"); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"qwerty\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий должен быть изменен",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.eq(parseInt(pm.collectionVariables.get(\"commentId\")));\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'qwerty'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"qwerty\"); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Комментарий с некорректным id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{id0}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{id0}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Несуществующий комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{id999}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{id999}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий должен быть удален",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"status должо быть равно 'Not Found'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.status).to.eql(\"Not Found\"); \r",
											"});\r",
											"\r",
											"pm.test(\"message должо быть равно 'Comment with id[\" + pm.collectionVariables.get(\"commentId\") + \"] doesn't exist.'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.message).to.eql(\"Comment with id[\" + pm.collectionVariables.get(\"commentId\") + \"] doesn't exist.\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET comment",
					"item": [
						{
							"name": "Комментарий с некорректным id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{id0}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{id0}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Несуществующий комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{id999}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{id999}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий к событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.not.be.null;\r",
											"   pm.collectionVariables.set(\"commentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'second comment'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"second comment\"); \r",
											"});\r",
											"\r",
											"pm.test(\"createdOn test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(new Date(jsonData.createdOn).toISOString().substring(0, 18)).to.eql(new Date().toISOString().substring(0, 18)); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const otherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid1\", otherUser.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"second comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.eq(parseInt(pm.collectionVariables.get(\"commentId\")));\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'some comment'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"second comment\"); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET comments",
					"item": [
						{
							"name": "Некорректные rangeStart и rangeEnd Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?eventId={{eid}}&rangeStart=2222-01-06%2013%3A30%3A38&rangeEnd=2020-09-06%2013%3A30%3A38",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "rangeStart",
											"value": "2222-01-06%2013%3A30%3A38"
										},
										{
											"key": "rangeEnd",
											"value": "2020-09-06%2013%3A30%3A38"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос с несуществующим событием",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?eventId={{id999}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{id999}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Запрос с некорректным id события",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?eventId={{id0}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{id0}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий хоба к событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.not.be.null;\r",
											"   pm.collectionVariables.set(\"commentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'хоба'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"хоба\"); \r",
											"});\r",
											"\r",
											"pm.test(\"createdOn test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(new Date(jsonData.createdOn).toISOString().substring(0, 18)).to.eql(new Date().toISOString().substring(0, 18)); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const otherUser = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid1\", otherUser.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"хоба\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий оба к событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.not.be.null;\r",
											"   pm.collectionVariables.set(\"commentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'оба'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"оба\"); \r",
											"});\r",
											"\r",
											"pm.test(\"createdOn test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(new Date(jsonData.createdOn).toISOString().substring(0, 18)).to.eql(new Date().toISOString().substring(0, 18)); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"оба\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий хобот к событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"comment id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.id).to.not.be.null;\r",
											"   pm.collectionVariables.set(\"commentId\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"eventId test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.eventId).to.eql(pm.collectionVariables.get(\"eid\")); \r",
											"});\r",
											"\r",
											"pm.test(\"text должо быть равно 'хобот'\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.text).to.eql(\"хобот\"); \r",
											"});\r",
											"\r",
											"pm.test(\"createdOn test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(new Date(jsonData.createdOn).toISOString().substring(0, 18)).to.eql(new Date().toISOString().substring(0, 18)); \r",
											"});\r",
											"\r",
											"pm.test(\"commenter id test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.commenter.id).to.eql(pm.collectionVariables.get(\"uid1\")); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"хобот\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{uid1}}/comments/{{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{uid1}}",
										"comments",
										"{{eid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Тест на опциональность параметров поиска Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по тексту оба Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"array size test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.length).to.eql(2); \r",
											"});\r",
											"\r",
											"pm.test(\"test хоба test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData[0].text).to.eql(\"хоба\"); \r",
											"});\r",
											"\r",
											"pm.test(\"test оба test\", function() {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData[1].text).to.eql(\"оба\"); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments?eventId={{eid}}&text=оба",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "text",
											"value": "оба"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "id999",
			"value": "999",
			"type": "string"
		},
		{
			"key": "commentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "id0",
			"value": "0",
			"type": "string"
		},
		{
			"key": "uid3",
			"value": "",
			"type": "string"
		}
	]
}